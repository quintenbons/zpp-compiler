== Parsing

== Done parsing
[35m[Node_TranslationUnit] Function count: 1
[0m[35m  [Node_Function] ReturnType: int ; Name: main ; ParamCount: 0
[0m[35m    [Node_Type] int
[0m[35m    [Node_FunctionParameterList] ParameterCount: 0
[0m[35m    [Node_CodeBlock] InstructionCount: 58
[0m[35m      [Node_Declaration] Type: int ; Assignment: 1
[0m[35m        [Node_Variable] x
[0m[35m        [Node_NumberLiteral] 5
[0m[35m      [Node_Declaration] Type: int ; Assignment: 1
[0m[35m        [Node_Variable] y
[0m[35m        [Node_NumberLiteral] 4
[0m[35m      [Node_Declaration] Type: int ; Assignment: 1
[0m[35m        [Node_Variable] z
[0m[35m        [Node_NumberLiteral] 4
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 1
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 2
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 3
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 4
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 5
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 6
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 7
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 8
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 9
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 10
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 11
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 12
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 13
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 14
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 15
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 16
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 17
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] x
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 18
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 19
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 20
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 21
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 22
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 23
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 24
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 25
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 26
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 27
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 28
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 29
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 30
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 31
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 32
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 33
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 34
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 35
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] y
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 36
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 37
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 38
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 39
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 40
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 41
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 42
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 43
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 44
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 45
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 46
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 47
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 48
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 49
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 50
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 51
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] y
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 52
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] z
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 53
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] z
[0m[35m          [Node_Variable] x
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 54
[0m[35m      [Node_ReturnStatement] 
[0m[35m      [Node_NumberLiteral] 0
[0m[35m[Node_TranslationUnit] Class count: 0
[0m
== Decorating
[35mScopeStack of 56 scopes
[0m[35m[Scope] id=0 ; parent=0
  [Type] id=1 ; name=char ; size=1
  [Type] id=2 ; name=int ; size=4
  [Type] id=0 ; name=void ; size=0
  [Function] id=2 name=main ; returnType=int ; parameters=
  [Function] id=1 name=printnum ; returnType=void ; parameters=int 
[0m[35m[Scope] id=1 ; parent=0
  [Variable] id=1 ; name=x ; location=LocalStackOffset: byteSize=4, byteOffset=4
  [Variable] id=2 ; name=y ; location=LocalStackOffset: byteSize=4, byteOffset=8
  [Variable] id=3 ; name=z ; location=LocalStackOffset: byteSize=4, byteOffset=12
[0m[35m[Scope] id=2 ; parent=1
[0m[35m[Scope] id=3 ; parent=1
[0m[35m[Scope] id=4 ; parent=1
[0m[35m[Scope] id=5 ; parent=1
[0m[35m[Scope] id=6 ; parent=1
[0m[35m[Scope] id=7 ; parent=1
[0m[35m[Scope] id=8 ; parent=1
[0m[35m[Scope] id=9 ; parent=1
[0m[35m[Scope] id=10 ; parent=1
[0m[35m[Scope] id=11 ; parent=1
[0m[35m[Scope] id=12 ; parent=1
[0m[35m[Scope] id=13 ; parent=1
[0m[35m[Scope] id=14 ; parent=1
[0m[35m[Scope] id=15 ; parent=1
[0m[35m[Scope] id=16 ; parent=1
[0m[35m[Scope] id=17 ; parent=1
[0m[35m[Scope] id=18 ; parent=1
[0m[35m[Scope] id=19 ; parent=1
[0m[35m[Scope] id=20 ; parent=1
[0m[35m[Scope] id=21 ; parent=1
[0m[35m[Scope] id=22 ; parent=1
[0m[35m[Scope] id=23 ; parent=1
[0m[35m[Scope] id=24 ; parent=1
[0m[35m[Scope] id=25 ; parent=1
[0m[35m[Scope] id=26 ; parent=1
[0m[35m[Scope] id=27 ; parent=1
[0m[35m[Scope] id=28 ; parent=1
[0m[35m[Scope] id=29 ; parent=1
[0m[35m[Scope] id=30 ; parent=1
[0m[35m[Scope] id=31 ; parent=1
[0m[35m[Scope] id=32 ; parent=1
[0m[35m[Scope] id=33 ; parent=1
[0m[35m[Scope] id=34 ; parent=1
[0m[35m[Scope] id=35 ; parent=1
[0m[35m[Scope] id=36 ; parent=1
[0m[35m[Scope] id=37 ; parent=1
[0m[35m[Scope] id=38 ; parent=1
[0m[35m[Scope] id=39 ; parent=1
[0m[35m[Scope] id=40 ; parent=1
[0m[35m[Scope] id=41 ; parent=1
[0m[35m[Scope] id=42 ; parent=1
[0m[35m[Scope] id=43 ; parent=1
[0m[35m[Scope] id=44 ; parent=1
[0m[35m[Scope] id=45 ; parent=1
[0m[35m[Scope] id=46 ; parent=1
[0m[35m[Scope] id=47 ; parent=1
[0m[35m[Scope] id=48 ; parent=1
[0m[35m[Scope] id=49 ; parent=1
[0m[35m[Scope] id=50 ; parent=1
[0m[35m[Scope] id=51 ; parent=1
[0m[35m[Scope] id=52 ; parent=1
[0m[35m[Scope] id=53 ; parent=1
[0m[35m[Scope] id=54 ; parent=1
[0m[35m[Scope] id=55 ; parent=1
[0m
== Done decorating
[35m[Node_TranslationUnit] Function count: 1
[0m[35m  [Node_Function] ReturnType: int ; Name: main ; ParamCount: 0
[0m[35m    [Node_Type] int
[0m[34m      [Decoration] TypeDescription: int ; Size: 4 ; Id: 2
[0m[35m    [Node_FunctionParameterList] ParameterCount: 0
[0m[35m    [Node_CodeBlock] InstructionCount: 58
[0m[35m      [Node_Declaration] Type: int ; Assignment: 1
[0m[35m        [Node_Variable] x
[0m[34m          [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_NumberLiteral] 5
[0m[35m      [Node_Declaration] Type: int ; Assignment: 1
[0m[35m        [Node_Variable] y
[0m[34m          [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_NumberLiteral] 4
[0m[35m      [Node_Declaration] Type: int ; Assignment: 1
[0m[35m        [Node_Variable] z
[0m[34m          [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_NumberLiteral] 4
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 1
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 2
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 3
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 4
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 5
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 6
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 7
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 8
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 9
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 10
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 11
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 12
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 13
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 14
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 15
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 16
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 17
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 18
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 19
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 20
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 21
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 22
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 23
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 24
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 25
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 26
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 27
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 28
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 29
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 30
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 31
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 32
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 33
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 34
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 35
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 36
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 37
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 38
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] =
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 39
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 40
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 41
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] ~
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 42
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 43
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 44
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] l
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 45
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 46
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 47
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] g
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 48
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 49
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 50
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] <
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 51
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] y
[0m[34m            [Decoration] VariableDescription: Id: 2
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 52
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 53
[0m[35m      [Node_ConditionalStatement] 
[0m[35m        [Node_BinaryOperation] >
[0m[35m          [Node_Variable] z
[0m[34m            [Decoration] VariableDescription: Id: 3
[0m[35m          [Node_Variable] x
[0m[34m            [Decoration] VariableDescription: Id: 1
[0m[35m        [Node_CodeBlock] InstructionCount: 1
[0m[35m          [Node_FunctionCall] printnum ; ArgumentCount: 1
[0m[35m            [Node_NumberLiteral] 54
[0m[35m      [Node_ReturnStatement] 
[0m[35m      [Node_NumberLiteral] 0
[0m[34m    [Decoration] FunctionDescription: main ; Id: 2
[0m[35m[Node_TranslationUnit] Class count: 0
[0m
== Generating code
[35mLEQ is seen here
[0m[35mLEQ is seen here
[0m[35mLEQ is seen here
[0m[35mLEQ is seen here
[0m[35mLEQ is seen here
[0m[35mLEQ is seen here
[0m[35mLEQ is seen here
[0m[35mLEQ is seen here
[0m[35mLEQ is seen here
[0m== Generated asm to a.asm:
section .data

section .rodata

section .bss

section .text
	extern printnum:function

	global main:function
	global _start:function

_start:
	call main
	mov rdi, rax            ; Exit code (0) expects return of main to be put in rax for now
	mov rax, 60                  ; Syscall number for exit (60)
	syscall                      ; Make the syscall

main:
	push rbp                 ; Save the base pointer
	mov rbp, rsp              ; Set base pointer to current stack pointer
	sub rsp, 4 ; Creating space on the stack
	mov rax, 5 ; Loading number literal
	mov [rbp-4], eax ; Storing value in memory
	sub rsp, 4 ; Creating space on the stack
	mov rax, 4 ; Loading number literal
	mov [rbp-8], eax ; Storing value in memory
	sub rsp, 4 ; Creating space on the stack
	mov rax, 4 ; Loading number literal
	mov [rbp-12], eax ; Storing value in memory
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	sete al
	test rax,rax
	jz ._U1_end_if
	mov rdi, 1 ; Loading number literal
	call printnum
._U1_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	sete al
	test rax,rax
	jz ._U3_end_if
	mov rdi, 2 ; Loading number literal
	call printnum
._U3_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	sete al
	test rax,rax
	jz ._U5_end_if
	mov rdi, 3 ; Loading number literal
	call printnum
._U5_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setne al
	test rax,rax
	jz ._U7_end_if
	mov rdi, 4 ; Loading number literal
	call printnum
._U7_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setne al
	test rax,rax
	jz ._U9_end_if
	mov rdi, 5 ; Loading number literal
	call printnum
._U9_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setne al
	test rax,rax
	jz ._U11_end_if
	mov rdi, 6 ; Loading number literal
	call printnum
._U11_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setle al
	test rax,rax
	jz ._U13_end_if
	mov rdi, 7 ; Loading number literal
	call printnum
._U13_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setle al
	test rax,rax
	jz ._U15_end_if
	mov rdi, 8 ; Loading number literal
	call printnum
._U15_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setle al
	test rax,rax
	jz ._U17_end_if
	mov rdi, 9 ; Loading number literal
	call printnum
._U17_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setge al
	test rax,rax
	jz ._U19_end_if
	mov rdi, 10 ; Loading number literal
	call printnum
._U19_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setge al
	test rax,rax
	jz ._U21_end_if
	mov rdi, 11 ; Loading number literal
	call printnum
._U21_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setge al
	test rax,rax
	jz ._U23_end_if
	mov rdi, 12 ; Loading number literal
	call printnum
._U23_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setl al
	test rax,rax
	jz ._U25_end_if
	mov rdi, 13 ; Loading number literal
	call printnum
._U25_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setl al
	test rax,rax
	jz ._U27_end_if
	mov rdi, 14 ; Loading number literal
	call printnum
._U27_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setl al
	test rax,rax
	jz ._U29_end_if
	mov rdi, 15 ; Loading number literal
	call printnum
._U29_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setg al
	test rax,rax
	jz ._U31_end_if
	mov rdi, 16 ; Loading number literal
	call printnum
._U31_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setg al
	test rax,rax
	jz ._U33_end_if
	mov rdi, 17 ; Loading number literal
	call printnum
._U33_end_if:
	mov eax, [rbp-4] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setg al
	test rax,rax
	jz ._U35_end_if
	mov rdi, 18 ; Loading number literal
	call printnum
._U35_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	sete al
	test rax,rax
	jz ._U37_end_if
	mov rdi, 19 ; Loading number literal
	call printnum
._U37_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	sete al
	test rax,rax
	jz ._U39_end_if
	mov rdi, 20 ; Loading number literal
	call printnum
._U39_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	sete al
	test rax,rax
	jz ._U41_end_if
	mov rdi, 21 ; Loading number literal
	call printnum
._U41_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setne al
	test rax,rax
	jz ._U43_end_if
	mov rdi, 22 ; Loading number literal
	call printnum
._U43_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setne al
	test rax,rax
	jz ._U45_end_if
	mov rdi, 23 ; Loading number literal
	call printnum
._U45_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setne al
	test rax,rax
	jz ._U47_end_if
	mov rdi, 24 ; Loading number literal
	call printnum
._U47_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setle al
	test rax,rax
	jz ._U49_end_if
	mov rdi, 25 ; Loading number literal
	call printnum
._U49_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setle al
	test rax,rax
	jz ._U51_end_if
	mov rdi, 26 ; Loading number literal
	call printnum
._U51_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setle al
	test rax,rax
	jz ._U53_end_if
	mov rdi, 27 ; Loading number literal
	call printnum
._U53_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setge al
	test rax,rax
	jz ._U55_end_if
	mov rdi, 28 ; Loading number literal
	call printnum
._U55_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setge al
	test rax,rax
	jz ._U57_end_if
	mov rdi, 29 ; Loading number literal
	call printnum
._U57_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setge al
	test rax,rax
	jz ._U59_end_if
	mov rdi, 30 ; Loading number literal
	call printnum
._U59_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setl al
	test rax,rax
	jz ._U61_end_if
	mov rdi, 31 ; Loading number literal
	call printnum
._U61_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setl al
	test rax,rax
	jz ._U63_end_if
	mov rdi, 32 ; Loading number literal
	call printnum
._U63_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setl al
	test rax,rax
	jz ._U65_end_if
	mov rdi, 33 ; Loading number literal
	call printnum
._U65_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setg al
	test rax,rax
	jz ._U67_end_if
	mov rdi, 34 ; Loading number literal
	call printnum
._U67_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setg al
	test rax,rax
	jz ._U69_end_if
	mov rdi, 35 ; Loading number literal
	call printnum
._U69_end_if:
	mov eax, [rbp-8] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setg al
	test rax,rax
	jz ._U71_end_if
	mov rdi, 36 ; Loading number literal
	call printnum
._U71_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	sete al
	test rax,rax
	jz ._U73_end_if
	mov rdi, 37 ; Loading number literal
	call printnum
._U73_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	sete al
	test rax,rax
	jz ._U75_end_if
	mov rdi, 38 ; Loading number literal
	call printnum
._U75_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	sete al
	test rax,rax
	jz ._U77_end_if
	mov rdi, 39 ; Loading number literal
	call printnum
._U77_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setne al
	test rax,rax
	jz ._U79_end_if
	mov rdi, 40 ; Loading number literal
	call printnum
._U79_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setne al
	test rax,rax
	jz ._U81_end_if
	mov rdi, 41 ; Loading number literal
	call printnum
._U81_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setne al
	test rax,rax
	jz ._U83_end_if
	mov rdi, 42 ; Loading number literal
	call printnum
._U83_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setle al
	test rax,rax
	jz ._U85_end_if
	mov rdi, 43 ; Loading number literal
	call printnum
._U85_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setle al
	test rax,rax
	jz ._U87_end_if
	mov rdi, 44 ; Loading number literal
	call printnum
._U87_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setle al
	test rax,rax
	jz ._U89_end_if
	mov rdi, 45 ; Loading number literal
	call printnum
._U89_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setge al
	test rax,rax
	jz ._U91_end_if
	mov rdi, 46 ; Loading number literal
	call printnum
._U91_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setge al
	test rax,rax
	jz ._U93_end_if
	mov rdi, 47 ; Loading number literal
	call printnum
._U93_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setge al
	test rax,rax
	jz ._U95_end_if
	mov rdi, 48 ; Loading number literal
	call printnum
._U95_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setl al
	test rax,rax
	jz ._U97_end_if
	mov rdi, 49 ; Loading number literal
	call printnum
._U97_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setl al
	test rax,rax
	jz ._U99_end_if
	mov rdi, 50 ; Loading number literal
	call printnum
._U99_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setl al
	test rax,rax
	jz ._U101_end_if
	mov rdi, 51 ; Loading number literal
	call printnum
._U101_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-8] ; Loading value from memory
	cmp rax,rbx
	setg al
	test rax,rax
	jz ._U103_end_if
	mov rdi, 52 ; Loading number literal
	call printnum
._U103_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-12] ; Loading value from memory
	cmp rax,rbx
	setg al
	test rax,rax
	jz ._U105_end_if
	mov rdi, 53 ; Loading number literal
	call printnum
._U105_end_if:
	mov eax, [rbp-12] ; Loading value from memory
	mov ebx, [rbp-4] ; Loading value from memory
	cmp rax,rbx
	setg al
	test rax,rax
	jz ._U107_end_if
	mov rdi, 54 ; Loading number literal
	call printnum
._U107_end_if:
	mov rax, 0 ; Loading number literal
	mov rsp, rbp              ; Restoring stack pointer
	pop rbp                   ; Restore the base pointer
	ret
== Generated .o as a.o:
== Generating exe as a.out:
